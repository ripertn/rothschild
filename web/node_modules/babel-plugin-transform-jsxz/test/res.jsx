var React = require('react');
var ReactDOM = require('react-dom');
var moment = require('moment');
var dagreD3 = require('dagre-d3');
var d3 = require('d3');
var hljs = require('highlight.js');
var X = require('xlsx');
var objectAssign = require('object-assign');
var timelineLib = require('../lib/timeline');

var RemoteProps = require('./props.js');
//var Highlight = require('react-highlight.js')


require('../auchanadmin.webflow/css/normalize.css');
require('../auchanadmin.webflow/css/webflow.css');
require('../auchanadmin.webflow/css/auchanadmin.webflow.css');
require('../graph.css');
require('../loopr.css');
require('../colorbrewer.css');
require('../map.css');
require('../timeline.css');
require('../d3-tip-style.css');

require('../auchanadmin.webflow/images/logo_auchanfr.png');
require('../auchanadmin.webflow/images/avocat.jpg');
require('../auchanadmin.webflow/images/logo.png');
require('../auchanadmin.webflow/images/unlock.png');

require('../auchanadmin.webflow/images/unhealthy-cluster.png');
require('../auchanadmin.webflow/images/healthy-cluster.png');

function webflowimg(src) {
  var res = /\/([^_]*_)?(.*)$/.exec(src);
  return res[2] ? "/public/images/" + res[2] : src;
}

function current_menu(props) {
  var menupath = {};
  props.user.value.menu.map(item => {
    item.menu.map(subitem => {
      if (subitem.route == props.route) {
        menupath = { topmenu: item.name, submenu: subitem.name };
      }
    });
  });
  if (props.user.value.menu.length == 1) menupath.topmenu = props.user.value.menu[0].name;
  return menupath;
}

function fixdata(data) {
  var o = "",
      l = 0,
      w = 10240;
  for (; l < data.byteLength / w; ++l) o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w, l * w + w)));
  o += String.fromCharCode.apply(null, new Uint8Array(data.slice(l * w)));
  return o;
}

var NavMenu = React.createClass({
  getInitialState() {
    return { topmenu: this.props.menu ? this.props.menu.topmenu : current_menu(this.props).topmenu };
  },
  //componentWillReceiveProps () {this.setState({topmenu: current_menu(this.props).topmenu})},
  render() {
    var Link = this.props.Link;
    var submenu = null;
    var currmenu = this.props.menu ? this.props.menu : current_menu(this.props);
    this.props.user.value.menu.map(menu => {
      if (menu.name == currmenu.topmenu) submenu = menu.menu;
    });
    //console.log("state:")
    //console.log(this.state)
    //console.log("currmenu:")
    //console.log(currmenu)
    return <div className="nav-container w-clearfix">
        <this.props.Link className="w-nav-brand" href="#" to="home"><img className="main-logo" width={315} src={webflowimg('images/logo.png')}></img>
        </this.props.Link><img className="logout" height={30} src={webflowimg('images/unlock.png')} onClick={this.props.logout}></img>
        <div className={cn('nav-main-bar', { hidden: !!currmenu.topmenu })}>{this.props.user.value.menu.map(menu => <Link key={menu.route} className="w-inline-block nav-main-link" to={menu.route}><div>{menu.name}</div></Link>)}</div>
        <this.props.Link href="#" className={cn('nav-main w-inline-block', { hidden: !currmenu.topmenu })} to="home">
          <div className="nav-main-arrow1"></div>
          <div className="nav-main-arrow2"></div>
          <div className="z-topmenu">{currmenu.topmenu}</div>
        </this.props.Link>
        <div className={cn('nav-tabs', { hidden: !currmenu.topmenu })}>{submenu && submenu.map(menu => <Link key={menu.route} to={menu.route} className={cn("w-inline-block nav-link", { active: menu.name == currmenu.submenu })}>{menu.name}</Link>)}</div>
      </div>;
  }
});

var { TimelineInit, Timeline, TimelineGraph } = require('./planning_ui/graph.js'),
    PlanningForm = require('./planning_ui/planning_form.js'),
    ExceptionForm = require('./planning_ui/exception_form.js');

var ui = {
  App: React.createClass({
    statics: { remoteProps: [RemoteProps.user] },
    render() {
      return <div className="z-root">
    <div className="nav"><NavMenu {...this.props} /></div>
    <div className="container"><this.props.Child {...this.props} /></div>
  </div>;
    }
  }),
  Login: React.createClass({
    getInitialState() {
      return { error: false };
    },
    submit(e) {
      e.preventDefault();
      this.props.login(ReactDOM.findDOMNode(this.refs.login).value, ReactDOM.findDOMNode(this.refs.password).value, () => this.setState({ error: true }));
    },
    render() {
      return <div className="login z-content">
          <div className="ct loginform w-container">
            <div className="w-form">
              <form data-name="Email Form" id="email-form" name="email-form" onSubmit={this.submit}>
                <img alt="auchan direct logo" width={599} src={webflowimg('http://uploads.webflow.com/56fa966dc505ae330859351f/57210d9e7f04e0ea4871649f_logo.png')}></img><input autoFocus="autofocus" className="input-text-loopr w-input" data-name="login" id="login" maxLength={256} name="login" placeholder="Votre login" type="text" ref="login"></input><input className="input-text-loopr w-input" data-name="password" id="password" maxLength={256} name="password" placeholder="Votre mot de passe" type="password" ref="password"></input><input className="btn-loopr w-button" data-wait="Please wait..." type="submit" defaultValue="Se connecter"></input>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail" style={{ display: this.state.error ? "block" : "none" }}>
                <p className="loginerror">
                  Mot de passe ou Login invalide
                </p>
              </div>
            </div>
          </div>
        </div>;
    }
  }),
  Dashboard: React.createClass({
    render() {
      return <div className="z-content">
        <div className="dashboard-container">
          <div className="dashboard-fullblock">
            <div className="dashboard-title">
              <div className="w-form">
                <form className="dash-select-csc-form w-clearfix" data-name="Email Form" id="email-form" name="email-form">
                  <select className="dash-select-csc w-select" data-name="csc" id="csc" name="csc">
                    <option value={11121}>Morangis</option>
                    <option value="First">First Choice</option>
                    <option value="Second">Second Choice</option>
                    <option value="Third">Third Choice</option>
                  </select>
                  <h1>Tableau de bord</h1>
                </form>
                <div className="w-form-done">
                  <p>Thank you! Your submission has been received!</p>
                </div>
                <div className="w-form-fail">
                  <p>Oops! Something went wrong while submitting the form</p>
                </div>
              </div>
            </div>
          </div>
          <div className="dashboard-blocks w-clearfix"></div>
        </div>
      </div>;
    }
  }),
  Exclusion: React.createClass({
    statics: { remoteProps: [] },
    render() {
      return <div className="z-content">
          <div className="tabcontainer w-clearfix">
            <div className="slot-header w-clearfix">
              <div className="w-clearfix w-form">
                <form className="select-week-form w-clearfix" data-name="Email Form" id="email-form" method="post" name="email-form">
                  <div className="z-input-csc-ct">
                    <select className="csc-selector w-select" data-name="csc" id="csc" name="csc">
                      <option value="">
                        Sélectionez un entrepot
                      </option>
                      <option value="csc1">
                        CSC 1
                      </option>
                      <option value="csc2">
                        CSC 2
                      </option>
                    </select>
                  </div>
                  <div className="z-input-cug-ct">
                    <input className="w-input week-selector" data-name="week" id="week" maxLength={256} name="week" placeholder="Semaine 35 du 18/04/2016 au 23/04/2016" type="text"></input>
                  </div>
                </form>
                <div className="w-form-done">
                  <p>
                    Thank you! Your submission has been received!
                  </p>
                </div>
                <div className="w-form-fail">
                  <p>
                    Oops! Something went wrong while submitting the form
                  </p>
                </div>
              </div><a className="awesome prev-week w-button" href="#"> Précédente</a><a className="awesome next-week w-button" href="#">Suivante &nbsp; </a>
            </div>
            <div className="map-container"></div>
            <div className="z-slot-container">
              <div className="slot-form w-form">
                <form data-name="Email Form 2" id="email-form-2" name="email-form-2">
                  <input className="save-slots-button w-button" data-wait="Please wait..." type="submit" defaultValue="Enregistrez les nouvelles capacit\xE9s"></input>
                  <div className="slot-week">
                    <div className="week-col">
                      <div>
                        <h2 className="week-title">
                          LU 04/12/2016
                        </h2>
                        <div className="slot-day-capacity">
                          Lundi &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;231 / 1234
                        </div>
                      </div>
                      <ol className="w-list-unstyled">
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                      </ol>
                    </div>
                    <div className="week-col">
                      <div>
                        <h2 className="week-title">
                          MA 04/12/2016
                        </h2>
                        <div className="slot-day-capacity">
                          Lundi &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;231 / 1234
                        </div>
                      </div>
                      <ol className="w-list-unstyled">
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                      </ol>
                    </div>
                    <div className="week-col">
                      <div>
                        <h2 className="week-title">
                          ME 04/12/2016
                        </h2>
                        <div className="slot-day-capacity">
                          Lundi &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;231 / 1234
                        </div>
                      </div>
                      <ol className="w-list-unstyled">
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                      </ol>
                    </div>
                    <div className="week-col">
                      <div>
                        <h2 className="week-title">
                          JE 04/12/2016
                        </h2>
                        <div className="slot-day-capacity">
                          Lundi &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;231 / 1234
                        </div>
                      </div>
                      <ol className="w-list-unstyled">
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                      </ol>
                    </div>
                    <div className="week-col">
                      <div>
                        <h2 className="week-title">
                          VE 04/12/2016
                        </h2>
                        <div className="slot-day-capacity">
                          Lundi &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;231 / 1234
                        </div>
                      </div>
                      <ol className="w-list-unstyled">
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                      </ol>
                    </div>
                    <div className="week-col">
                      <div>
                        <h2 className="week-title">
                          SA 04/12/2016
                        </h2>
                        <div className="slot-day-capacity">
                          Lundi &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;231 / 1234
                        </div>
                      </div>
                      <ol className="w-list-unstyled">
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                      </ol>
                    </div>
                    <div className="week-col">
                      <div>
                        <h2 className="week-title">
                          DI 04/12/2016
                        </h2>
                        <div className="slot-day-capacity">
                          Lundi &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;231 / 1234
                        </div>
                      </div>
                      <ol className="w-list-unstyled">
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                        <li className="slot-box slot-box-area">
                          <div className="slot-area-title">
                            07:00 - 09:00
                          </div>
                          <div className="slot-area">
                            <div className="slot-area-open"></div>
                            <div className="slot-area-closed"></div>
                          </div>
                        </li>
                      </ol>
                    </div>
                  </div>
                </form>
                <div className="w-form-done">
                  <p>
                    Thank you! Your submission has been received!
                  </p>
                </div>
                <div className="w-form-fail">
                  <p>
                    Oops! Something went wrong while submitting the form
                  </p>
                </div>
              </div>
            </div>
          </div>
          <div className="ct w-container"></div>
        </div>;
    }
  }),
  Exceptions: React.createClass({
    statics: { remoteProps: [] },
    render() {
      return <div className="z-content">
          <div className="tabcontainer w-clearfix">
            <div className="select-week-form w-form">
              <form data-name="Email Form" id="email-form" method="post" name="email-form">
                <div className="z-input-csc-ct">
                  <select className="error loopr-select w-select" data-name="csc" id="csc" name="csc">
                    <option value="">
                      Sélectionez un entrepot
                    </option>
                    <option value="csc1">
                      CSC 1
                    </option>
                    <option value="csc2">
                      CSC 2
                    </option>
                  </select>
                  <p className="error loopr-input-message">
                    Required
                  </p>
                </div>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail">
                <p>
                  Oops! Something went wrong while submitting the form
                </p>
              </div>
            </div>
            <div className="new-exception-day w-form">
              <form data-name="Email Form 3" id="email-form-3" name="email-form-3">
                <label className="new-exception-label" htmlFor="name">De</label><input className="new-exception-input w-input" data-name="Name" id="name" maxLength={256} name="name" placeholder="Date de d\xE9but" type="text"></input><label className="new-exception-label" htmlFor="enddate">à</label><input className="new-exception-input w-input" data-name="enddate" id="enddate" maxLength={256} name="enddate" placeholder="Date de fin" required="required" type="email"></input><input className="btn-loopr w-button" data-wait="Please wait..." type="submit" defaultValue="Ajouter la fermeture exceptionelle"></input>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail">
                <p>
                  Oops! Something went wrong while submitting the form
                </p>
              </div>
            </div>
            <div className="z-slot-container">
              <div className="slot-form w-form">
                <form data-name="Email Form 2" id="email-form-2" name="email-form-2">
                  <input className="save-slots-button w-button" data-wait="Please wait..." type="submit" defaultValue="Enregistrez les nouvelles capacit\xE9s"></input>
                  <div className="slot-week">
                    <ul className="month-list w-list-unstyled">
                      <li className="exception-month">
                        <h1>
                          Janvier 2016
                        </h1>
                        <ul className="w-list-unstyled">
                          <li className="exception-day w-clearfix">
                            <div className="exception-day-slot">
                              Du 01/01/2016 à 08:00 au 01/01/2016 à 22:00
                            </div><input className="btn-loopr remove-exceptional w-button" data-wait="Please wait..." type="submit" defaultValue="X"></input>
                          </li>
                          <li className="exception-day w-clearfix">
                            <div className="exception-day-slot">
                              Du 01/01/2016 à 08:00 au 01/01/2016 à 22:00
                            </div><input className="btn-loopr remove-exceptional w-button" data-wait="Please wait..." type="submit" defaultValue="X"></input>
                          </li>
                          <li className="exception-day w-clearfix">
                            <div className="exception-day-slot">
                              Du 01/01/2016 à 08:00 au 01/01/2016 à 22:00
                            </div><input className="btn-loopr remove-exceptional w-button" data-wait="Please wait..." type="submit" defaultValue="X"></input>
                          </li>
                        </ul>
                      </li>
                      <li className="exception-month">
                        <h1>
                          Mars 2016
                        </h1>
                        <ul className="w-list-unstyled">
                          <li className="exception-day w-clearfix">
                            <div className="exception-day-slot">
                              Du 01/01/2016 à 08:00 au 01/01/2016 à 22:00
                            </div><input className="btn-loopr remove-exceptional w-button" data-wait="Please wait..." type="submit" defaultValue="X"></input>
                          </li>
                          <li className="exception-day w-clearfix">
                            <div className="exception-day-slot">
                              Du 01/01/2016 à 08:00 au 01/01/2016 à 22:00
                            </div><input className="btn-loopr remove-exceptional w-button" data-wait="Please wait..." type="submit" defaultValue="X"></input>
                          </li>
                          <li className="exception-day w-clearfix">
                            <div className="exception-day-slot">
                              Du 01/01/2016 à 08:00 au 01/01/2016 à 22:00
                            </div><input className="btn-loopr remove-exceptional w-button" data-wait="Please wait..." type="submit" defaultValue="X"></input>
                          </li>
                        </ul>
                      </li>
                    </ul>
                  </div>
                </form>
                <div className="w-form-done">
                  <p>
                    Thank you! Your submission has been received!
                  </p>
                </div>
                <div className="w-form-fail">
                  <p>
                    Oops! Something went wrong while submitting the form
                  </p>
                </div>
              </div>
            </div>
          </div>
          <div className="ct w-container"></div>
        </div>;
    }
  }),

  Slots: React.createClass({
    statics: { remoteProps: [RemoteProps.slots, RemoteProps.sheetconf] },
    getInitialState: function () {
      return { editing: false,
        current_area: null, import_status: null, import_msg: null, hover_areas: null, current_zoning: 0,
        slots: this.props.slots && this.props.slots.value,
        settings: false
      };
    },
    componentWillReceiveProps(next) {
      this.setState({ import_status: null, slots: next.slots && next.slots.value });
    },
    getWeekNumber(d) {
      var d = new Date(+d);
      d.setHours(0, 0, 0);
      d.setDate(d.getDate() + 4 - (d.getDay() || 7));
      return Math.round(((d - new Date(d.getFullYear(), 0, 1)) / 8.64e7 + 1) / 7);
    },
    todayWeek() {
      var d = new Date();
      return d.getFullYear() + '-W' + this.getWeekNumber(d);
    },
    change_scope(e) {
      e.preventDefault();
      var week = ReactDOM.findDOMNode(this.refs.week).value;
      var csc = ReactDOM.findDOMNode(this.refs.csc).value;
      this.props.Link.GoTo(this.props.route, {}, { csc: csc, week: week });
    },
    prevWeek(e) {
      e.preventDefault();
      var d = new Date(this.state.slots.slots[0].date);
      d.setDate(d.getDate() - 7);
      ReactDOM.findDOMNode(this.refs.week).value = d.getFullYear() + '-W' + this.getWeekNumber(d);
      this.change_scope(e);
    },
    nextWeek(e) {
      e.preventDefault();
      var d = new Date(this.state.slots.slots[0].date);
      d.setDate(d.getDate() + 7);
      ReactDOM.findDOMNode(this.refs.week).value = d.getFullYear() + '-W' + this.getWeekNumber(d);
      this.change_scope(e);
    },
    save_slots(e) {
      e.preventDefault();
      var self = this;
      var slots = Array.prototype.map.call(ReactDOM.findDOMNode(self.refs.slots).getElementsByClassName("slot-capacity-input"), e => ({ slot: e.getAttribute("data-slot"),
        capacity: parseInt(e.value),
        areas: e.getAttribute("data-areas").split(",") }));
      var payload;
      if (self.state.slots.zoning) {
        payload = { zoning: self.state.slots.zoning.zoning, slots: slots };
      } else {
        payload = { zoning: "REX", slots: slots };
      }
      self.props.save_slots(RemoteProps.curr_shop(self.props), self.props.qs.week, payload).then(planning => {
        self.setState({ slots: planning, import_status: null, editing: false });
      });
    },
    hoverclass(e) {
      e.stopPropagation();e.preventDefault();
      ReactDOM.findDOMNode(this.refs.drop).className = e.type == "dragover" ? "excel-import-drop hover" : "excel-import-drop";
    },
    drop(e) {
      this.hoverclass(e);
      var self = this;
      var allowed_alias = [].concat.apply([], this.props.slots.value.zonings[this.state.current_zoning].areas.map(a => [a.alias.toLowerCase(), a.name.toLowerCase()]));
      allowed_alias.push("tous");

      var files = e.target.files || e.dataTransfer.files;
      if (files.length != 1) {
        self.setState({ import_status: "ko",
          import_msg: "L'importation n'est possible qu'en glissant un unique fichier excel" });
      } else {
        var f = files[0];
        var reader = new FileReader();
        reader.onload = function (e) {
          var data = e.target.result;
          var arr = fixdata(data);
          var wb = X.read(btoa(arr), { type: 'base64' });

          var sheet = null;
          var conf = self.props.sheetconf.value;
          if (sheet = wb.Sheets[conf.sheet]) {
            // areas
            var areas = {};
            var range = X.utils.decode_range(conf.arearange);
            for (var R = range.s.r; R <= range.e.r; ++R) {
              var line = [];
              for (var C = range.s.c; C <= range.e.c; ++C) line.push(sheet[X.utils.encode_cell({ c: C, r: R })]);

              var from_t = line[0] && /^([0-9]{1,2}):([0-9]{1,2})$/.exec(line[0].w || "");
              var to_t = line[1] && /^([0-9]{1,2}):([0-9]{1,2})$/.exec(line[1].w || "");
              if (from_t && to_t) {
                var pad2 = s => "00".substring(0, 2 - s.length) + s;
                self.props.slots.value.slots.map((day, i) => {
                  var slot = day.date + ' ' + pad2(from_t[1]) + ':' + pad2(from_t[2]) + ' ' + pad2(to_t[1]) + ':' + pad2(to_t[2]);
                  var cell = line[2 + i];
                  if (!cell || !cell.w) {
                    console.log("no slot areas for '" + slot + "'");
                  } else {
                    areas[slot] = { areas: cell.w.split(","), cell: X.utils.encode_cell({ c: range.s.c + 2 + i, r: R }) };
                  }
                });
              } else {
                console.log("no first 2 columns are not, line " + R + " ignored");
              }
            }
            console.log(areas);

            // slots
            var slots = [];
            var errors = [];
            var range = X.utils.decode_range(conf.range);
            for (var R = range.s.r; R <= range.e.r; ++R) {
              var line = [];
              for (var C = range.s.c; C <= range.e.c; ++C) line.push(sheet[X.utils.encode_cell({ c: C, r: R })]);
              var from_t = line[0] && /^([0-9]{1,2}):([0-9]{1,2})$/.exec(line[0].w || "");
              var to_t = line[1] && /^([0-9]{1,2}):([0-9]{1,2})$/.exec(line[1].w || "");
              if (from_t && to_t) {
                var pad2 = s => "00".substring(0, 2 - s.length) + s;
                self.props.slots.value.slots.map((day, i) => {
                  var slot = day.date + ' ' + pad2(from_t[1]) + ':' + pad2(from_t[2]) + ' ' + pad2(to_t[1]) + ':' + pad2(to_t[2]);
                  var cell = line[2 + i];
                  if (!cell || !cell.w || isNaN(+cell.w)) {
                    console.log("no slots for '" + slot + "'");
                  } else {
                    var slot_areas = (areas[slot] && areas[slot].areas || ["tous"]).map(areaname => areaname.toLowerCase());
                    slot_areas.map(areaname => {
                      if (allowed_alias.indexOf(areaname) === -1) {
                        errors.push(<li>{areas[slot].cell + ': la zone ' + areaname + ' est inconnue pour ce zonage.'}</li>);
                      }
                    });
                    slots.push({ slot: slot, capacity: +cell.w, areas: slot_areas });
                  }
                });
              } else {
                console.log("no first 2 columns are not, line " + R + " ignored");
              }
            }
            slots.sort((a, b) => a.slot > b.slot ? 1 : a.slot < b.slot ? -1 : 0);
            if (errors.length > 0) {
              self.setState({ import_status: "ko", import_msg: <ul>{errors}</ul> });
            } else {
              self.setState({ import_status: "ok", import_msg: "En cours de chargement" });
              var zoning = self.props.slots.value.zonings[self.state.current_zoning].zoning;
              self.props.get_planning(RemoteProps.curr_shop(self.props), self.props.qs.week, { zoning: zoning, slots: slots }).then(planning => {
                var nbslots = slots.length;
                var days = slots.map(slot => slot.slot.substring(0, 10)).sort();
                var first_day = days[0];var last_day = days[days.length - 1];
                var hours = slots.map(slot => slot.slot.substring(11)).sort();
                var first_hour = hours[0];var last_hour = hours[hours.length - 1];
                var desc = "de " + nbslots + " créneaux entre " + first_day + " et " + last_day + " de " + first_hour + " et " + last_hour;
                self.setState({ slots: planning,
                  editing: true,
                  import_status: "ok",
                  import_msg: "Importation réussie " + desc,
                  current_area: null });
              }, () => {
                self.setState({ import_status: "ko",
                  import_msg: "Erreur serveur inconnue, impossible de charger les slots, merci de contacter un administrateur" });
              });
            }
          } else {
            msg = `L'importation a échoué, impossible de trouver la feuille ${ conf.sheet }`;
            self.setState({ import_status: "ko", import_msg: msg });
          }
        };
        reader.readAsArrayBuffer(f);
      }
      console.log("drop!!");
    },
    raz() {
      this.setState({
        slots: this.props.slots && this.props.slots.value.slots, editing: false });
    },
    saveSettings(e) {
      e.preventDefault();
      var self = this;
      var range = ReactDOM.findDOMNode(self.refs.range_input).value;
      var arearange = ReactDOM.findDOMNode(self.refs.arearange_input).value;
      var sheet = ReactDOM.findDOMNode(self.refs.sheet_input).value;
      var regex = /^[A-Z]+[0-9]+:[A-Z]+[0-9]+$/;
      if (!regex.exec(range) || !regex.exec(arearange)) {
        self.setState({ import_status: "ko", import_msg: "format de plage de données incorrect : devrait être sous la forme B21:D42" });
      } else {
        self.props.update_sheetconf(RemoteProps.curr_shop(self.props), { range: range, sheet: sheet, arearange: arearange }).then(() => {
          self.setState({ settings: false, import_status: "ok", import_msg: `Paramètre d'importation Excel modifié : ${ range } dans ${ sheet }` });
        });
      }
    },
    select_area(e, i) {
      e.preventDefault();
      console.log("select area " + i);
      this.setState({ import_status: null, current_area: i });
    },
    change_zoning(e) {
      e.preventDefault();
      this.setState({ import_status: null, current_zoning: ReactDOM.findDOMNode(this.refs.zoning).selectedIndex });
    },
    render() {
      var area_idx = {};
      var slotareas = {};
      var zoning = "REX";
      if (this.state.slots.zoning) {
        zoning = this.state.slots.zoning.zoning;
        slotareas = this.state.slots.zoning.areas;
        this.state.slots.zoning.areas.map((area, idx) => {
          area_idx[area.name.toLowerCase()] = idx;
          area_idx[area.alias.toLowerCase()] = idx;
        });
      }

      var not_hidden = areas => this.state.current_area == null || areas[0] == "tous" || areas.map(area => area_idx[area]).indexOf(this.state.current_area) !== -1;

      console.log(this.props.sheetconf.range);
      console.log(this.props.sheetconf.arearange);
      var curr_shop = this.props.user.value.cscs.filter(e => e.id == RemoteProps.curr_shop(this.props))[0];
      return <div className="z-content">
          <div className="tabcontainer w-clearfix">
            <div className="slot-header w-clearfix">
              <div className="w-clearfix w-form">
                <form className="select-week-form w-clearfix" data-name="Email Form" id="email-form" method="post" name="email-form" onSubmit={this.submit}>
                  <div className="z-input-csc-ct">
                    <select className="csc-selector w-select" data-name="csc" id="csc" name="csc" ref="csc" onChange={this.change_scope} defaultValue={curr_shop.id}>{this.props.user.value.cscs.map(cscelem => {
                      return <option key={cscelem.id} value={cscelem.id}>{cscelem.name}</option>;
                    })}</select>
                  </div>
                  <div className="z-input-cug-ct">
                    <input className="w-input week-selector" data-name="week" id="week" maxLength={256} name="week" placeholder="Semaine 35 du 18/04/2016 au 23/04/2016" ref="week" type="week" onChange={this.change_scope} defaultValue={this.props.qs.week || this.todayWeek()}></input>
                  </div>
                </form>
                <div className="w-form-done">
                  <p>
                    Thank you! Your submission has been received!
                  </p>
                </div>
                <div className="w-form-fail">
                  <p>
                    Oops! Something went wrong while submitting the form
                  </p>
                </div>
              </div><a className="awesome prev-week w-button" href="#" onClick={this.prevWeek}> Précédente</a><a className="awesome next-week w-button" href="#" onClick={this.nextWeek}>Suivante &nbsp; </a>
            </div>
            <div className="excel-import-drop" ref="drop" onDragOver={this.hoverclass} onDragLeave={this.hoverclass} onDrop={this.drop}>
              <div className={cn('excel-import-setting', { hidden: !this.state.settings })}>
                <a className="awesome show-import-setting w-button" href="#" onClick={this.saveSettings}></a>
                <div className="w-form">
                  <form data-name="Email Form 3" id="email-form-3" name="email-form-3" onSubmit={this.saveSettings}>
                    <div className="excel-import-label">
                      heure-début | heure-fin | capacité-lun | capacité-mar | capacité-mer | capacité-jeu | capacité-ven | capacité-sam
                    </div>
                    <div>
                      <label className="excel-import-label" htmlFor="excel-sheet">Feuille :</label><ui.Input className="excel-import-input excel-sheet w-input" data-name="excel-sheet" id="excel-sheet" maxLength={256} name="excel-sheet" placeholder="FICHIER UTILISE" required="required" type="text" ref="sheet_input" init={true} defaultValue={this.props.sheetconf.value.sheet}></ui.Input><label className="excel-import-label" htmlFor="cell-from">Capacités :</label><ui.Input className="excel-cell excel-import-input w-input" data-name="cell-from" id="cell-from" maxLength={256} name="cell-from" placeholder="Q27:X35" required="required" type="text" ref="range_input" init={true} defaultValue={this.props.sheetconf.value.range}></ui.Input><label className="excel-import-label" htmlFor="cell-from-2">exclusions :</label><ui.Input className="excel-cell excel-import-input w-input" data-name="Cell From 2" id="cell-from-2" maxLength={256} name="cell-from-2" placeholder="Q27:X35" required="required" type="text" ref="arearange_input" init={true} defaultValue={this.props.sheetconf.value.arearange}></ui.Input><input className="hidden-submit w-button" data-wait="Please wait..." type="submit"></input>
                    </div>
                  </form>
                  <div className="w-form-done">
                    <div>
                      Thank you! Your submission has been received!
                    </div>
                  </div>
                  <div className="w-form-fail">
                    <div>
                      Oops! Something went wrong while submitting the form
                    </div>
                  </div>
                </div>
              </div>
              <div className={cn('setting-txt-block w-clearfix', { hidden: !!this.state.settings })}>
                <div className="excel-import-txt">
                  Glissez ici le fichier excel à importer
                </div>
                <div className="w-form zonage-form">
                  <form data-name="Email Form 4" id="email-form-4" name="email-form-4">
                    <div>
                      Zonage de l'import :
                    </div><select className="areas-select w-select" data-name="Csc 4" id="csc-4" name="csc-4" ref="zoning" onChange={this.change_zoning}>{this.props.slots.value.zonings.map((zoning, idx) => <option key={idx}>{zoning.zoning}</option>)}</select>
                  </form>
                  <div className="w-form-done">
                    <div>
                      Thank you! Your submission has been received!
                    </div>
                  </div>
                  <div className="w-form-fail">
                    <div>
                      Oops! Something went wrong while submitting the form
                    </div>
                  </div>
                </div>
                <div className="allowed-alias">
                  Alias autorisés :
                </div>
                <div className="alias-list allowed-alias">{curr_shop.type == "rex" ? "REX: Pas d'alias" : this.props.slots.value.zonings[this.state.current_zoning].areas.map(area => area.alias).join(", ")}</div><a className="awesome show-import-setting w-button" href="#" onClick={() => this.setState({ import_status: null, settings: true })}></a>
              </div>
            </div>
            <div className="w-clearfix z-slot-container">
              <div className={cn('areas-current', { hidden: curr_shop.type == 'rex' })}>
                <div className="areas-current-title">
                  Zonage de la semaine :
                </div><this.props.Link href="#" to="csc-conf" query={{ csc: RemoteProps.curr_shop(this.props), zonage: zoning }}>{zoning}</this.props.Link>
              </div>
              <div className={cn('area-legend-cont w-clearfix', { hidden: curr_shop.type == 'rex' })}>{curr_shop.type == "lad" && [<div key="all_areas" onClick={e => this.select_area(e, null)} className={cn('active area-legend'.replace('active', ''), { active: null == this.state.current_area })}>
                  <div className="area-legend-text">tous</div>
                </div>].concat(slotareas.map((area, idx) => idx !== 0 && <div key={area.name} onClick={e => this.select_area(e, idx)} className={cn('active area-legend'.replace('active', ''), { active: idx == this.state.current_area })}>
                  <div className="area-legend-text">{area.name}</div>
                </div>))}</div>
              <div className={cn('import-info ' + this.state.import_status, { hidden: !this.state.import_status })}>{this.state.import_msg}</div>
              <div className={cn('area-info'.replace("hidden", ""), { hidden: !this.state.hover_areas })}>
                <div>
                  Slot <span className="slotdates">{this.state.hover_areas && this.state.hover_areas.slot}</span> uniquement pour les zones :
                </div>
                <ul>{this.state.hover_areas && this.state.hover_areas.areas.map((area, i) => {
                  return <li key={i}>{slotareas[area_idx[area]].name + " (" + slotareas[area_idx[area]].postcodes.join(", ") + ")"}</li>;
                })}</ul>
              </div>
              <div className="slot-form w-form">
                <form data-name="Email Form 2" id="email-form-2" name="email-form-2" onSubmit={this.save_slots}>
                  <div className={cn('animate_h save-slot-box', { hidden_h: !this.state.editing })}>
                    <a className="reset-slots-button w-button" href="#" onClick={this.raz}>RAZ</a><input className="save-slots-button w-button" data-wait="Please wait..." type="submit" defaultValue="Enregistrez les nouvelles capacit\xE9s"></input>
                  </div>
                  <div className="slot-week w-clearfix" ref="slots">{this.state.slots && this.state.slots.slots.map(day => <div className="week-col" key={day.date}>
                      <div>
                        <h2 className="week-title">{day.title}</h2>
                        <div className="slot-day-capacity">{day.subtitle}</div>
                      </div>
                      <ol className="w-list-unstyled">{day.slots.map((slot, i) => {
                        if (slot.blank) {
                          return <li className="slot-box slot-break" key={day.title + i} style={{ height: slot.size * 68 }}>
                          <div className="slot-break-title slot-title"></div>
                        </li>;
                        } else if (slot.forbidden) {
                          return <li className="slot-box slot-break" key={day.title + i} style={{ height: slot.size * 68 }}>
                          <div className="slot-break-title slot-title"><div>{slot.title}</div><div>fermeture exceptionnelle</div></div>
                        </li>;
                        } else {
                          return [<li key={day.title + i} style={{ height: slot.size * 68 }} className={cn('slot-box slot-break', { hidden: not_hidden(slot.areas) })}>
                          <div className="slot-break-title slot-title"><div>{slot.title}</div><div>Exclu de la zone</div></div>
                        </li>, <li key={slot.id} style={{ height: slot.size * 68 }} className={cn('slot-box slot-medium'.replace(/slot-(full|medium|free)/, '') + ' slot-' + slot.ratio, { hidden: !not_hidden(slot.areas) })}>
                          <div onMouseEnter={e => {
                              this.setState({ hover_areas: { slot: slot.title, areas: slot.areas } });
                            }} onMouseLeave={e => {
                              this.setState({ hover_areas: null });
                            }} className={cn('partial-slot', { hidden: slot.areas[0] === "tous" })}>
                            
                          </div>
                          <div className="slot-title">{slot.title}</div>
                          <div className="slot-capacity-box w-clearfix">
                            <ui.Input className="slot-capacity-input w-input" data-name="Capacity 4" id="capacity-4" maxLength={256} name="capacity-4" placeholder={232} required="required" init={!this.state.editing} onChange={() => {
                                if (!this.state.editing) this.setState({ import_status: null, editing: true });
                              }} type="number" min="0" step="1" data-slot={slot.id} data-areas={slot.areas.join(",")} defaultValue={'' + slot.total}></ui.Input>
                            <div className="slot-capacity-reserved">{slot.res + ' /'}</div>
                          </div>
                        </li>];
                        }
                      })}</ol>
                    </div>)}</div>
                </form>
                <div className="w-form-done">
                  <p>
                    Thank you! Your submission has been received!
                  </p>
                </div>
                <div className="w-form-fail">
                  <p>
                    Oops! Something went wrong while submitting the form
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>;
    }
  }),
  Input: React.createClass({
    componentWillReceiveProps(nextProps) {
      if (nextProps["data-slot"] === "2016-09-22 07:00 09:00") {
        console.log("receive props");
        console.log(this.props);
        console.log(nextProps);
      }
      if (nextProps.init !== this.props.init && nextProps.init || nextProps.defaultValue !== this.props.defaultValue) {
        var input = React.findDOMNode(this);
        if (input.value !== nextProps.defaultValue) {
          console.log("reset value from " + input.value + " to " + nextProps.defaultValue);
          input.value = nextProps.defaultValue;
        }
      }
    },
    render() {
      return <input {...this.props} />;
    }
  }),
  Sup: React.createClass({
    statics: { remoteProps: [RemoteProps.sup] },
    render() {
      var sup = this.props.sup.value;
      return <div className="z-content">
          <div className="tabcontainer">
            <div className="status-block w-clearfix">
              <img className="status-img" alt="Image Shopping" src={webflowimg('http://uploads.webflow.com/56fa966dc505ae330859351f/5742c9a234b5152626ff00c4_healthy-cluster.png').replace(/u?n?healthy/, sup.status == 'OK' ? 'healthy' : 'unhealthy')}></img>
              <ul className="infra-errors">{sup.messages.filter(msg => msg != '').map((msg, i) => <li key={i}>{msg}</li>)}</ul>
            </div>
          </div>
        </div>;
    }
  }),
  Graphs: React.createClass({
    statics: { remoteProps: [] },
    changeGraphs() {
      this.props.Link.GoTo(this.props.route, {}, {
        graph: ReactDOM.findDOMNode(this.refs.graph).value,
        period: ReactDOM.findDOMNode(this.refs.period).value
      });
    },
    render() {
      var graphs = { "atos-vpn-prod": ["atos_web_prod", "atos_ftp_prod", "atos_sql_prod"],
        "atos-vpn-qa": ["atos_web_qa", "atos_ftp_qa", "atos_sql_qa"],
        "obs-vpn-prod": ["obs_prod"],
        "obs-vpn-qa": ["obs_qa"],
        "transactors_qa": ["transactors_qa"],
        "transactors_prod": ["transactors_prod"] };
      var graph = this.props.qs.graph || "transactors_prod";
      var period = this.props.qs.period || "1h";
      return <div className="z-content">
          <div className="tabcontainer">
            <div className="status-block"></div>
            <div className="w-form">
              <form className="w-clearfix" data-name="monitorstocks-form" id="wf-form-monitorstocks-form" name="wf-form-monitorstocks-form">
                <select className="graph-select w-select" data-name="graph" id="graph" name="graph" ref="graph" onChange={this.changeGraphs} defaultValue={graph}>
                  <option value="transactors_prod">
                    Nombre de commandes en cours de traitement Prod
                  </option>
                  <option value="atos-vpn-prod">
                    VPN Atos Production
                  </option>
                  <option value="obs-vpn-prod">
                    VPN OBS Production
                  </option>
                </select><select className="graph-period-select w-select" data-name="Graph 2" id="graph-2" name="graph-2" ref="period" onChange={this.changeGraphs} defaultValue={period}>
                  <option value="1h">
                    1 heure
                  </option>
                  <option value="6h">
                    6 heures
                  </option>
                  <option value="1d">
                    1 journée
                  </option>
                  <option value="1w">
                    1 semaine
                  </option>
                </select>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail">
                <p>
                  Oops! Something went wrong while submitting the form
                </p>
              </div>
            </div>
            <div className="graph-imgs">{graphs[graph].map(idgraph => <img className="graph-img" alt="Image Shopping" key={idgraph} src={'/api/graph/' + idgraph + '/' + period}></img>)}</div>
          </div>
        </div>;
    }
  }),

  Search: React.createClass({
    statics: { remoteProps: [RemoteProps.search, RemoteProps.user_orders, RemoteProps.fsm] },

    submit_date(e) {
      e.preventDefault();
      var startdate = ReactDOM.findDOMNode(this.refs.start_date).value;
      var starttime = ReactDOM.findDOMNode(this.refs.start_time).value;
      var enddate = ReactDOM.findDOMNode(this.refs.end_date).value;
      var endtime = ReactDOM.findDOMNode(this.refs.end_time).value;
      var datetype = ReactDOM.findDOMNode(this.refs.datetype).value;
      var csc = ReactDOM.findDOMNode(this.refs.csc).value;
      this.props.Link.GoTo('orders', {}, { date_debut: startdate, heure_debut: starttime, date_fin: enddate, heure_fin: endtime, type: datetype, csc: csc });
    },

    submit_user(e) {
      e.preventDefault();
      var userid = ReactDOM.findDOMNode(this.refs.userid).value;
      this.props.Link.GoTo('orders', {}, { user: userid });
    },

    submit_order(e) {
      e.preventDefault();
      var fsmview = ReactDOM.findDOMNode(this.refs.fsmview).value;
      var orderid = ReactDOM.findDOMNode(this.refs.orderid).value;
      this.props.Link.GoTo('orders', {}, { order: orderid, view: fsmview });
    },

    dynamic_rendering: function (update) {
      var self = this;
      if (self.props.qs.view == "left-right-graph" || self.props.qs.view == "top-down-graph") {
        var g = new dagreD3.graphlib.Graph();
        g.setGraph({ nodesep: 70, ranksep: 120,
          rankdir: self.props.qs.view == "left-right-graph" ? "LR" : "TB",
          marginx: 20, marginy: 20
        });

        // set nodes
        var uniqStates = self.props.orderfsm.value.fsm.fsm.reduce((acc, action) => {
          for (var i in action.to) if (acc.indexOf(action.to[i]) < 0) acc.push(action.to[i]);
          if (acc.indexOf(action.from) < 0) acc.push(action.from);
          return acc;
        }, []);
        uniqStates.map((state, i) => {
          var className = "info";
          if (state === self.props.orderfsm.value.fsm.current) className = "success";
          var html = '<div class="alert alert-' + className + '">' + state + '</div>';
          g.setNode(state, { label: html, labelType: "html" });
        });

        // set edges
        self.props.orderfsm.value.fsm.fsm.map(action => {
          action.to.map(to => {
            /*
            // {"handlers":["Magistor","Hive"],
            //  "fsm":[{"to":["magistor_ordered"],"handler":"Magistor","from":"init","action":"create"},
            //  */
            var color = self.colorSchemes()[self.props.orderfsm.value.fsm.handlers.indexOf(action.handler)];
            var label = '<div class="edge-label" style="border-color:' + color + '; color: ' + color + '">' + action.action + '</span>';
            var style = "stroke: " + color + ";";
            //g.setEdge(action.from + "_" + to + "_" + action.action, action.from, to, {label: label, style: style})
            g.setEdge(action.from, to, { label: label, style: style, labelType: "html" });
          });
        });

        var render = new dagreD3.render();
        var svg = d3.select("svg"),
            inner = svg.select("g"),
            zoom = d3.behavior.zoom().on("zoom", function () {
          inner.attr("transform", "translate(" + d3.event.translate + ")" + "scale(" + d3.event.scale + ")");
        });
        svg.call(zoom);
        inner.call(render, g);

        // Zoom and scale to fit
        //if (isUpdate) {
        //  var zoomScale = zoom.scale();
        //  var graphWidth = renderedLayout.graph().width + 80;
        //  var graphHeight = renderedLayout.graph().height + 40;
        //  var width = parseInt(svg.style('width').replace(/px/, ''));
        //  var height = parseInt(svg.style('height').replace(/px/, ''));

        //  zoomScale = Math.min(width / graphWidth, height / graphHeight);
        //  var translate = [(width/2) - ((graphWidth*zoomScale)/2), (height/2) - ((graphHeight*zoomScale)/2)];
        //  zoom.translate(translate);
        //  zoom.scale(zoomScale);
        //  zoom.event(svg.transition().duration(500));
        //  svg.attr("height", graphHeight);
        //  svg.attr("width", graphWidth);
        //}
      } else if (self.refs.hl) {
        hljs.highlightBlock(ReactDOM.findDOMNode(self.refs.hl));
      }
    },

    componentDidUpdate: function () {
      this.dynamic_rendering(true);
    },

    componentDidMount: function () {
      this.dynamic_rendering(false);
    },

    content() {
      if (this.props.orderfsm) {
        if (this.props.qs.view == "left-right-graph" || this.props.qs.view == "top-down-graph") {
          return <svg><g className="diagram" transform="translate(20,20)" /></svg>;
        } else if (this.props.qs.view == "json") {
          return <div>
            <a href={"/api/export/" + this.props.qs.order + "/json"}>Lien vers le JSON</a>
            <pre ref="hl" className="json"><code className="json">{this.props.orderfsm.value.json}</code></pre>
          </div>;
        } else if (this.props.qs.view == "cdc") {
          return <div>
            <a href={"/api/export/" + this.props.qs.order + "/xml"}>Lien vers le CDC</a>
            <pre ref="hl" className="xml"><code className="xml">{this.props.orderfsm.value.cdc}</code></pre>
          </div>;
        }
      }
    },

    on_order_click(oid) {
      var self = this;
      return e => {
        e.preventDefault();
        var fsmview = ReactDOM.findDOMNode(self.refs.fsmview).value;
        var orderinput = ReactDOM.findDOMNode(this.refs.orderid);
        orderinput.value = oid;
        this.props.Link.GoTo('orders', {}, { order: oid, view: fsmview });
      };
    },

    results() {
      if (this.props.qs.date_debut || this.props.qs.user) {
        return this.props.search.value.map(order => <li className="table-row w-clearfix" key={order.id} style={{ cursor: "pointer" }} onClick={this.on_order_click(order.id)}>
                  <div className="table-cell z-row-id">{order.id}</div>
                  <div className="table-cell z-row-user">{order.user}</div>
                  <div className="table-cell z-row-csc">{order.csc}</div>
                  <div className="table-cell table-cell-date z-row-dateorder">{order.dateorder}</div>
                  <div className="table-cell table-cell-date z-row-datedelivery">{order.datedelivery.substring(0, 16)}</div>
                  <div className="table-cell table-cell-type z-row-front">{order.front}</div>
                  <div className="table-cell z-row-status">{order.state}</div>
                </li>);
      } else {
        return [];
      }
    },

    colorSchemes() {
      return ["#1ba1e2", "#d80073", "#87794e", "#6d8764", "#aa00ff", "#a4c400", "#f66"];
    },

    render() {
      var now = new Date();
      now.setSeconds(0);

      return <div className="z-content">
          <div className="tabcontainer w-clearfix">
            <div className="search-user-form w-form">
              <form data-name="Email Form" id="email-form" name="email-form" onSubmit={this.submit_user}>
                <input className="search-user-input w-input" data-name="User 2" id="user-2" maxLength={256} name="user-2" placeholder="identifiant utilisateur" required="required" type="text" ref="userid" defaultValue={this.props.qs.user}></input><input className="btn-loopr w-button z-search-ts-submit" data-wait="Please wait..." type="submit" defaultValue="Lister commandes"></input>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail">
                <p>
                  Oops! Something went wrong while submitting the form
                </p>
              </div>
            </div>
            <div className="search-order-form w-form">
              <form data-name="Email Form" id="email-form" name="email-form" onSubmit={this.submit_order}>
                <input className="search-order-input w-input" data-name="user" id="user" maxLength={256} name="user" placeholder="identifiant commande" required="required" type="text" ref="orderid" defaultValue={this.props.qs.order}></input><input className="btn-loopr w-button z-search-ts-submit" data-wait="Please wait..." type="submit" defaultValue="Choisir la commande"></input>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail" style={{ display: !!this.props.qs.search_order_error ? "block" : "none" }}>
                <p>{this.props.qs.search_order_error}</p>
              </div>
            </div>
            <div className="search-interval-form w-form">
              <form data-name="monitorstocks-form" id="wf-form-monitorstocks-form" name="wf-form-monitorstocks-form" onSubmit={this.submit_date}>
                <div className="search-interval-block">
                  <select className="search-selector w-select z-warehouse" data-name="Orientation 4" id="orientation-4" name="orientation-4" ref="csc" defaultValue={RemoteProps.curr_csc(this.props)}>{this.props.user.value.cscs.filter(csc => csc.type == "lad").map(cscelem => {
                    return <option key={cscelem.id} value={cscelem.id}>{cscelem.name}</option>;
                  })}</select><select className="search-selector w-select z-date-type" data-name="Orientation 3" id="orientation-3" name="orientation-3" ref="datetype" defaultValue={this.props.qs.type}>
                    <option value="created_at">
                      Date de création
                    </option>
                    <option value="delivery_at">
                      Date de livraison
                    </option>
                  </select><label className="search-label" htmlFor="start-date">du</label><input className="start-date-input w-input z-start-date" data-name="start-date" id="start-date" maxLength={256} name="start-date" placeholder="10/12/2016" required="required" ref="start_date" type="date" defaultValue={this.props.qs.date_debut || now.toISOString().substring(0, 10)}></input><input className="time-input w-input z-start-time" data-name="Start Date 2" id="start-date-2" maxLength={256} name="start-date-2" placeholder="10:12" required="required" ref="start_time" step="60" type="time" defaultValue={this.props.qs.heure_debut || "00:00:00"}></input><label className="search-label" htmlFor="end-date">au</label><input className="start-date-input w-input z-end-date" data-name="end-date" id="end-date" maxLength={256} name="end-date" placeholder="10/12/2016" required="required" ref="end_date" type="date" defaultValue={this.props.qs.date_fin || now.toISOString().substring(0, 10)}></input><input className="time-input w-input z-end-time" data-name="Start Date 3" id="start-date-3" maxLength={256} name="start-date-3" placeholder="10:12" required="required" ref="end_time" step="60" type="time" defaultValue={this.props.qs.heure_fin || now.toLocaleTimeString("fr-FR", { hour12: false })}></input><input className="btn-loopr w-button z-search-ts-submit" data-wait="Please wait..." type="submit" defaultValue="Trouver"></input>
                </div>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail" style={{ display: !!this.props.qs.search_interval_error ? "block" : "none" }}>
                <p>{this.props.qs.search_interval_error}</p>
              </div>
            </div>
            <div className={cn('search-content', { hidden: !(this.props.qs.date_debut || this.props.qs.user) })}>
              <div className="table-header w-clearfix">
                <div className="table-h1">
                  id
                </div>
                <div className="table-h1">
                  Utilisateur
                </div>
                <div className="table-h1">
                  Entrepôt
                </div>
                <div className="table-h1 table-h1-date">
                  Date commande
                </div>
                <div className="table-h1 table-h1-date">
                  Date livraison
                </div>
                <div className="table-h1 table-h1-type">
                  type
                </div>
                <div className="table-h1">
                  status
                </div>
              </div>
              <ul className="w-list-unstyled">{this.results()}</ul>
            </div>
            <div className={cn('search-order', { hidden: !this.props.qs.order })}>
              <div className="search-order-content">{this.content()}</div>
              <div className="search-orderview-form w-form">
                <form className="w-clearfix" data-name="monitorstocks-form" id="wf-form-monitorstocks-form" name="wf-form-monitorstocks-form">
                  <select className="fsm-orientation w-select" data-name="Orientation 5" id="orientation-5" name="orientation-5" ref="fsmview" onChange={this.submit_order} defaultValue={this.props.qs.view}>
                    <option value="left-right-graph">
                      Graph gauche-&gt;droite
                    </option>
                    <option value="top-down-graph">
                      Graph haut-&gt;bas
                    </option>
                    <option value="json">
                      Hive JSON
                    </option>
                    <option value="cdc">
                      CDC
                    </option>
                  </select>
                  <div className="fsm-handlers">{this.props.orderfsm && this.props.orderfsm.value.fsm.handlers.map((handler, i) => <div className="fsm-handler" key={i}>
                      <div className="fsm-handler-color" style={{ 'backgroundColor': this.colorSchemes()[i] }}></div>
                      <div className="fsm-handler-name">{handler}</div>
                    </div>)}</div>
                </form>
                <div className="w-form-done">
                  <p>
                    Thank you! Your submission has been received!
                  </p>
                </div>
                <div className="w-form-fail">
                  <p>
                    Oops! Something went wrong while submitting the form
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>;
    }
  }),

  Logs: React.createClass({
    getInitialState: function () {
      return { logs: this.props.logs };
    },

    componentDidMount: function () {
      var self = this;
      var evtSource = new EventSource(`/api/logger/events/${ this.props.csc }/${ this.props.cug }`);
      this.setState({ evtSource: evtSource });
      Notification.requestPermission(function (status) {});
      evtSource.addEventListener("log", function (e) {
        var log = JSON.parse(e.data);

        console.log(log);
        new Notification(log.event);
        self.state.logs.unshift(log);
        self.setState({ logs: self.state.logs });
      });
    },

    componentWillUnmount: function () {
      this.state.evtSource.close();
    },

    render() {
      return <div className="z-stocklog-container">
                <h1>
                  <this.props.Link className="stock-link" href="#" to="stocks" query={{ csc: this.props.csc, cug: this.props.cug }}>{'CSC: ' + this.props.csc + ', CUG: ' + this.props.cug}</this.props.Link>
                </h1>
                <ul className="logs w-list-unstyled">{this.state.logs.map(this.render_log)}</ul>
              </div>;
    },
    render_log(log) {
      var d = new Date(Date.parse(log.ts));
      function pad(s) {
        return s < 10 ? '0' + s : s;
      }
      var dt = [pad(d.getUTCDate()), pad(d.getUTCMonth() + 1), d.getUTCFullYear()].join('/') + ' ' + [pad(d.getUTCHours()), pad(d.getUTCMinutes()), pad(d.getUTCSeconds())].join(':');
      var msg = "";
      if (log.value) {
        msg = 'quantity: ' + log.value.quantity + ', expected: ' + log.value.expected;
      } else if (log.diffs) {
        msg = log.diffs.map(diff => diff.key + ' : ' + diff.old_val + '=>' + diff.new_val).join(' , ');
      }
      return <li className="log w-clearfix" key={d.toUTCString()}>
                    <div className="log-ts">{dt}</div>
                    <div className="log-label">{log.event}</div>
                    <div className="log-content">{msg}</div>
                  </li>;
    }
  }),

  Grep: React.createClass({
    statics: { remoteProps: [RemoteProps.grep] },
    submit(e) {
      e.preventDefault();
      var pattern = ReactDOM.findDOMNode(this.refs.pattern).value;
      var fromdate = ReactDOM.findDOMNode(this.refs.fromdate).value;
      var todate = ReactDOM.findDOMNode(this.refs.todate).value;
      this.props.Link.GoTo('logs', {}, { pattern: pattern, fromdate: fromdate, todate: todate });
    },
    render() {
      var sum = this.props.grep && this.props.grep.value.reduce((x, y) => x + y.count, 0);
      return <div className="z-content">
          <div className="tabcontainer">
            <div className="w-form">
              <form data-name="monitorstocks-form" id="wf-form-monitorstocks-form" name="wf-form-monitorstocks-form" onSubmit={this.submit}>
                <input className="grep-search-input w-input" data-name="grep" id="grep" maxLength={256} name="grep" placeholder=".*" type="text" ref="pattern" defaultValue={this.props.qs.pattern}></input><input className="start-date-input w-input z-start-date" data-name="start-date" id="start-date" maxLength={256} name="start-date" placeholder="12/10/2016" required="required" ref="fromdate" type="date" defaultValue={this.props.qs.fromdate || new Date().toISOString().substring(0, 10)}></input><input className="start-date-input w-input z-end-date" data-name="Start Date 2" id="start-date-2" maxLength={256} name="start-date-2" placeholder="12/10/2016" required="required" ref="todate" type="date" defaultValue={this.props.qs.todate || new Date().toISOString().substring(0, 10)}></input><input className="btn-log-search btn-loopr w-button" data-wait="Please wait..." type="submit" defaultValue="Search Logs"></input>
                <div className="grep-desc">{this.props.grep && '' + sum + ' résultats' || 'Saisir la recherche à effectuer, ou une expression régulière entre "/" /regex/'}</div>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail">
                <p>
                  Oops! Something went wrong while submitting the form
                </p>
              </div>
            </div>
            <div className="z-greps-container">{this.props.grep && this.props.grep.value.map((logfile, i) => <ui.GrepBlock key={i} logfile={logfile} />)}</div>
          </div>
        </div>;
    }
  }),
  GrepBlock: React.createClass({
    render() {
      var logfile = this.props.logfile;
      return <div className="z-grep-container" key={logfile.title}>
                <h1>{logfile.title}</h1>
                <ul className="logs w-list-unstyled">{logfile.lines.map((line, j) => <li className="log" key={j}>
                    <div className="grep-content" key={j}>{line}</div>
                  </li>)}</ul>
              </div>;
    }
  }),
  Logger: React.createClass({
    statics: { remoteProps: [RemoteProps.monitored] },
    submit(e) {
      e.preventDefault();
      this.props.change_monitored(ReactDOM.findDOMNode(this.refs.monitorspec).value);
    },
    render() {
      return <div className="z-content">
          <div className="tabcontainer">
            <div className="w-form">
              <form data-name="monitorstocks-form" id="wf-form-monitorstocks-form" name="wf-form-monitorstocks-form" onSubmit={this.submit}>
                <input className="w-input" data-name="monitored" id="monitored" maxLength={256} name="monitored" placeholder="11121/12343,11222/1223,11222/1342" type="text" ref="monitorspec" defaultValue={this.props.monitored.value.monitored}></input><input className="btn-loopr center w-button" data-wait="Please wait..." type="submit" defaultValue="Surveiller ces stocks (remplacent les pr\xE9c\xE9dents stocks surveill\xE9s)"></input>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail">
                <p>
                  Oops! Something went wrong while submitting the form
                </p>
              </div>
            </div>
            <div className="z-log-container">{this.props.monitored.value.logs.map(log => <ui.Logs Link={this.props.Link} key={log.csc + log.cug} {...log} />)}</div>
          </div>
        </div>;
    }
  }),
  P300: React.createClass({
    statics: { remoteProps: [RemoteProps.search, RemoteProps.order_dlcs, RemoteProps.locks] },
    getInitialState() {
      return { lock_error: null, unlock_error: null };
    },
    submit_date(e) {
      e.preventDefault();
      var startdate = ReactDOM.findDOMNode(this.refs.start_date).value;
      var starttime = ReactDOM.findDOMNode(this.refs.start_time).value;
      var enddate = ReactDOM.findDOMNode(this.refs.end_date).value;
      var endtime = ReactDOM.findDOMNode(this.refs.end_time).value;
      var datetype = ReactDOM.findDOMNode(this.refs.datetype).value;
      var csc = ReactDOM.findDOMNode(this.refs.csc).value;
      this.props.Link.GoTo(this.props.route, {}, { date_debut: startdate, heure_debut: starttime, date_fin: enddate, heure_fin: endtime, type: datetype, csc: csc });
    },
    on_order_click(oid) {
      var self = this;
      return e => {
        e.preventDefault();
        self.props.Link.GoTo(self.props.route, {}, { order: oid });
      };
    },
    onUnlockOrder(e) {
      e.preventDefault();
      var self = this;
      var dlc_decli = Array.prototype.map.call(ReactDOM.findDOMNode(this.refs.products).getElementsByClassName("dlcsel"), e => {
        return { type: e.name.split("_")[0], value: e.value };
      });
      this.props.unlock_dlc_decli(this.props.qs.order, dlc_decli).then(() => {
        self.setState({ unlock_error: null });
        setTimeout(() => {
          this.props.Link.GoTo(this.props.route);
        }, 300);
      }, () => {
        self.setState({ unlock_error: "impossible d'application la transition sur cette commande, peut être est elle déjà débloquée ?" });
      });
    },
    onSetLocks(e) {
      e.preventDefault();
      var self = this;
      var locks = ReactDOM.findDOMNode(this.refs.lockinput).value;
      this.props.update_locks(locks).then(() => {
        self.setState({ lock_error: null });
      }, () => {
        self.setState({ lock_error: "impossible de mettre à jour les commandes bloquées, mauvais format ?" });
      });
    },
    content() {
      if (this.props.qs.date_debut && this.props.search) {
        return <div className="search-content">
              <div className="table-header w-clearfix">
                <div className="table-h1">
                  id
                </div>
                <div className="table-h1">
                  Utilisateur
                </div>
                <div className="table-h1">
                  Entrepôt
                </div>
                <div className="table-h1 table-h1-date">
                  Date commande
                </div>
                <div className="table-h1 table-h1-date">
                  Date livraison
                </div>
                <div className="table-h1 table-h1-type">
                  type
                </div>
                <div className="table-h1">
                  status
                </div>
              </div>
              <ul className="w-list-unstyled">{this.props.search.value.map(order => <li className="table-row w-clearfix" key={order.id} style={{ cursor: "pointer" }} onClick={this.on_order_click(order.id)}>
                  <div className="table-cell z-row-id">{order.id}</div>
                  <div className="table-cell z-row-user">{order.user}</div>
                  <div className="table-cell z-row-csc">{order.csc}</div>
                  <div className="table-cell table-cell-date z-row-dateorder">{order.dateorder}</div>
                  <div className="table-cell table-cell-date z-row-datedelivery">{order.datedelivery.substring(0, 16)}</div>
                  <div className="table-cell table-cell-type z-row-front">{order.front}</div>
                  <div className="table-cell z-row-status">{order.state}</div>
                </li>)}</ul>
            </div>;
      } else if (this.props.qs.order && this.props.order) {
        return <div className="z-p300-order">
                <h1>{'Commande #' + this.props.order.value.order.order_number}</h1>
                <div className="w-form">
                  <form data-name="Email Form" id="email-form" name="email-form" onSubmit={this.onUnlockOrder}>
                    <ul className="product-list w-list-unstyled" ref="products">{this.props.order.value.basket.articles.map(product => {
                  if (product.dlcs[0] != "pas de DLC/déclinaison") {
                    return <li className="product-list-item" key={product.id}>
                        <div className="w-row">
                          <div className="w-clearfix w-col w-col-8">
                            <img className="pdt-img" alt="Image Shopping" src={'http://www.auchandirect.fr/static/images/products/line/' + product.cug + '.jpg'}></img>
                            <div className="pdt-description">{product.description}</div>
                            <div className="pdt-details z-pdt-details-line1">{'id: ' + product.cug + ' ean: ' + product.ean}</div>
                            <div className="pdt-details z-pdt-details-line2">{'quantité: ' + product.quantity}</div>
                            <div className="pdt-details z-pdt-details-line3">{'dlc: ' + (product.dlc || "non définie")}</div>
                          </div>
                          <div className="w-col w-col-4">
                            <div className="loopr-input-ct">
                              <select data-name="Dlc 4" id="dlc-4" className={cn('error loopr-select w-select'.replace('error', ''), { dlcsel: true, error: false })} defaultValue={product.dlc || "pas de DLC/déclinaison"} name={'dlc_' + product.cug}>{product.dlcs.map(dlc => <option key={dlc} value={dlc}>{dlc}</option>)}</select>
                            </div>
                            <p className="error loopr-input-message"></p>
                          </div>
                        </div>
                      </li>;
                  } else {
                    return <li className="product-list-item" key={product.id}>
                        <div className="w-row">
                          <div className="w-clearfix w-col w-col-8">
                            <img className="pdt-img" alt="Image Shopping" src={'http://www.auchandirect.fr/static/images/products/line/' + product.cug + '.jpg'}></img>
                            <div className="pdt-description">{product.description}</div>
                            <div className="pdt-details z-pdt-details-line1">{'id: ' + product.cug + ' ean: ' + product.ean}</div>
                            <div className="pdt-details z-pdt-details-line2">{'quantité: ' + product.quantity}</div>
                            <div className="pdt-details z-pdt-details-line3">{'dlc: ' + (product.dlc || "non définie")}</div>
                          </div>
                          <div className="w-col w-col-4">
                            <div className="loopr-input-ct">
                              <select data-name="Dlc 4" id="dlc-4" className={cn('error loopr-select w-select'.replace('error', ''), { dlcsel: true, error: false })} defaultValue={product.decli[0] || "pas de DLC/déclinaison"} name={'decli_' + product.cug}>{product.decli.map(decli_cug => <option key={decli_cug} value={decli_cug}>{decli_cug}</option>)}</select>
                            </div>
                            <p className="error loopr-input-message"></p>
                          </div>
                        </div>
                      </li>;
                  }
                })}</ul>
                    <div className="form-actions">
                      <input className="btn-loopr w-button z-btn-submit" data-wait="Please wait..." type="submit" defaultValue="D\xE9bloquer avec ces DLCs"></input>
                    </div>
                  </form>
                  <div className="w-form-done">
                    <p>
                      Thank you! Your submission has been received!
                    </p>
                  </div>
                  <div className="w-form-fail" style={{ display: this.state.unlock_error ? "block" : "none" }}>
                    <p>{this.state.unlock_error}</p>
                  </div>
                </div>
              </div>;
      } else {
        return [];
      }
    },
    render() {
      var now = new Date();now.setSeconds(0);
      return <div className="z-content">
          <div className="tabcontainer">
            <div className="lock-form w-form">
              <form data-name="Email Form 2" id="email-form-2" name="email-form-2" onSubmit={this.onSetLocks}>
                <label className="search-label" htmlFor="lock_create">Blocage de commande :</label><input className="input-medium input-text-loopr w-input" data-name="lock_create" id="lock_create" maxLength={256} name="lock_create" placeholder="hive/11228,atos/11228, etc." type="text" ref="lockinput" defaultValue={this.props.locks.value.as_text}></input><input className="btn-loopr green w-button" data-wait="Please wait..." type="submit" defaultValue="bloquer"></input>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail" style={{ display: this.state.lock_error ? "block" : "none" }}>
                <p>{this.state.lock_error}</p>
              </div>
            </div>
            <div className="search-interval-form w-form">
              <form data-name="monitorstocks-form" id="wf-form-monitorstocks-form" name="wf-form-monitorstocks-form" onSubmit={this.submit_date}>
                <div className="search-interval-block">
                  <h1>
                    Commandes bloqués
                  </h1><select className="search-selector w-select z-warehouse" data-name="Orientation 5" id="orientation-5" name="orientation-5" ref="csc" defaultValue={RemoteProps.curr_csc(this.props) || "11228"}>{this.props.user.value.cscs.filter(csc => csc.type == "lad").map(cscelem => {
                    return <option key={cscelem.id} value={cscelem.id}>{cscelem.name}</option>;
                  })}</select><select className="search-selector w-select z-date-type" data-name="Orientation 6" id="orientation-6" name="orientation-6" ref="datetype" defaultValue={this.props.qs.type}>
                    <option value="created_at">
                      Date de création
                    </option>
                    <option value="delivery_at">
                      Date de livraison
                    </option>
                  </select><label className="search-label" htmlFor="start-date-4">du</label><input className="start-date-input w-input z-start-date" data-name="Start Date 4" id="start-date-4" maxLength={256} name="start-date-4" placeholder="10/12/2016" required="required" ref="start_date" type="date" defaultValue={this.props.qs.date_debut || now.toISOString().substring(0, 10)}></input><input className="time-input w-input z-start-time" data-name="Start Date 5" id="start-date-5" maxLength={256} name="start-date-5" placeholder="10:12" required="required" ref="start_time" step="60" type="time" defaultValue={this.props.qs.heure_debut || "00:00:00"}></input><label className="search-label" htmlFor="end-date-2">au</label><input className="start-date-input w-input z-end-date" data-name="End Date 2" id="end-date-2" maxLength={256} name="end-date-2" placeholder="10/12/2016" required="required" ref="end_date" type="date" defaultValue={this.props.qs.date_fin || now.toISOString().substring(0, 10)}></input><input className="time-input w-input z-end-time" data-name="Start Date 6" id="start-date-6" maxLength={256} name="start-date-6" placeholder="10:12" required="required" ref="end_time" step="60" type="time" defaultValue={this.props.qs.heure_fin || "23:59:00"}></input><input className="btn-loopr w-button z-search-ts-submit" data-wait="Please wait..." type="submit" defaultValue="Trouver"></input>
                </div>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail" style={{ display: !!this.props.qs.search_interval_error ? "block" : "none" }}>
                <p>{this.props.qs.search_interval_error}</p>
              </div>
            </div>
            <div className="search-content">{this.content()}</div>
          </div>
        </div>;
    }
  }),
  Stock: React.createClass({
    statics: { remoteProps: [] },
    getInitialState: function () {
      return { csc_error: false, cug_error: false };
    },
    renderSelect() {
      var choices = this.props.user.value.cscs.filter(csc => csc.type == "lad").map(({ id, name }) => ({ id, name: `${ name } (${ id })` }));
      var def = { name: 'Sélectionnez un entrepot', id: "null" };

      return [].concat(def).concat(choices).map(c => <option key={c.id} value={c.id}>{c.name}</option>);
    },
    valid(value) {
      return !(null === value || 'null' === value || '' === value);
    },
    onSubmit(e) {
      e.preventDefault();
      var csc = ReactDOM.findDOMNode(this.refs.csc).value;
      var cug = ReactDOM.findDOMNode(this.refs.cug).value;
      if (this.valid(csc) && this.valid(cug)) {
        this.setState({ csc_error: false, cug_error: false });
        this.props.Link.GoTo('stocks', {}, { csc: csc, cug: cug });
      } else {
        this.setState({ csc_error: !this.valid(csc), cug_error: !this.valid(cug) });
      }
    },
    render() {
      return <div className="z-content">
          <div className="tabcontainer">
            <h1>
              Recherche Stock
            </h1>
            <div className="w-form">
              <form className="stock-form" data-name="Email Form" id="email-form" method="post" name="email-form" onSubmit={this.onSubmit}>
                <div className="w-row">
                  <div className="w-col w-col-5">
                    <div className="z-input-csc-ct">
                      <select data-name="csc" id="csc" name="csc" ref="csc" className={cn('error loopr-select w-select'.replace('error', ''), { error: this.state.csc_error })} defaultValue={RemoteProps.curr_csc(this.props)} onChange={this.onChangeCsc}>{this.renderSelect()}</select>
                      <p className="error loopr-input-message">{this.state.csc_error ? "Required" : null}</p>
                    </div>
                  </div>
                  <div className="w-col w-col-5">
                    <div className="z-input-cug-ct">
                      <input data-name="cug" id="cug" maxLength={256} name="cug" placeholder="CUG, ex: 57353" type="text" ref="cug" className={cn('error input-text-loopr w-input'.replace('error', ''), { error: this.state.cug_error })} defaultValue={this.props.qs.cug} onChange={this.onChangeCug}></input>
                      <p className="error loopr-input-message">{this.state.cug_error ? "Required" : null}</p>
                    </div>
                  </div>
                  <div className="w-col w-col-2">
                    <input className="btn-loopr w-button z-search-submit" data-wait="Please wait..." type="submit" defaultValue="Rechercher"></input>
                  </div>
                </div>
              </form>
              <div className="w-form-done">
                <p>
                  Thank you! Your submission has been received!
                </p>
              </div>
              <div className="w-form-fail">
                <p>
                  Oops! Something went wrong while submitting the form
                </p>
              </div>
            </div>
            <div className="stock-results"><this.props.Child {...this.props} /></div>
          </div>
        </div>;
    }
  }),
  StockResult: React.createClass({
    statics: { remoteProps: [RemoteProps.stock] },
    render() {
      if (this.props.qs.csc && this.props.qs.cug && this.props.stock && this.props.stock.value) {
        var stk = this.props.stock.value[0].stored;
        return <div className="z-stock-results">
                <div className="stock-product">
                  <div className="zc-stock-product">
                    <h2>
                      Produit
                    </h2>
                    <div className="w-clearfix">
                      <img className="pdt-img" alt="Image Shopping" src={'http://www.auchandirect.fr/static/images/products/line/' + stk.cug + '.jpg'}></img>
                      <div className="pdt-description">{stk.cug}</div>
                      <div className="pdt-details z-pdt-details-line1">{'emplacement: ' + stk.place}</div>
                      <div className="pdt-details z-pdt-details-line2"></div>
                      <div className="pdt-details z-pdt-details-line3"></div>
                    </div>
                  </div>
                </div>
                <div className="stock-stocks">
                  <div className="zc-stock-stocks">
                    <h2>
                      Stocks
                    </h2>
                    <ul className="stock-list w-list-unstyled">{this.props.stock.value.map((stock, i) => <li className="stock-list-item" key={i}>
                        <div className="w-row">
                          <div className="w-col w-col-2 w-col-small-6 w-col-tiny-6">
                            <div className="csc-name">{stock.stored.dlc || stock.stored.cug || "Pas de DLC/déclinaison"}</div>
                          </div>
                          <div className="w-col w-col-10 w-col-small-6 w-col-tiny-6 z-stock-list">
            <div>{'Stock magistor : ' + stock.stored.quantity}</div>
            <div>{'Réservé Atos: ' + stock.stored.atos.res + '; sur attendu ' + stock.stored.atos.res_exp}</div>
            <div>{'À libérer au prochain STK Atos : ' + stock.stored.atos.res_insnapshot + '; sur attendu ' + stock.stored.atos.res_exp_insnapshot}</div>
            <div>{'Réservé Loopr: sur stock actuel : ' + stock.stored.loopr.res + '; sur attendu ' + stock.stored.loopr.res_exp}</div>
            <div>{'À libérer au prochain STK Loopr : ' + stock.stored.loopr.res_insnapshot + '; sur attendu ' + stock.stored.loopr.res_exp_insnapshot}</div>
            </div>
                        </div>
                      </li>)}</ul>
                  </div>
                </div>
              </div>;
      }

      return null;
    }
  }),
  TimelineInit: TimelineInit,
  Timeline: Timeline,
  ExceptionForm: ExceptionForm,
  PlanningForm: PlanningForm,
  TimelineGraph: TimelineGraph,
  ErrorPage: React.createClass({
    render() {
      return <div className="z-root">
      <div className="container">
        <div className="login z-content">
          <div className="ct loginform w-container">
            <img alt="auchan direct logo" src="http://uploads.webflow.com/56fa966dc505ae330859351f/57210d9e7f04e0ea4871649f_logo.png" width={599}></img>
            <h1>{'Erreur ' + this.props.status}</h1>
            <div className="error-msg">{this.props.message}</div>
          </div>
        </div>
      </div>
    </div>;
    }
  }),

  CscConf: require("./csc_conf.js")
};

function cn() {
  var args = arguments,
      classes = [];
  for (var i in args) {
    var arg = args[i];
    if (!arg) continue;
    if ('string' === typeof arg || 'number' === typeof arg) {
      classes.push(arg.replace("active", ""));
    } else if ('object' === typeof arg) {
      for (var key in arg) if (arg[key]) classes.push(key);
    }
  }
  return classes.join(' ');
}

module.exports = ui;
